import asyncio
from aiogram import Bot,Dispatcher,F,Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart,Command
from apps.key import main_kb,categories,items# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from aiogram.fsm.state import State,StatesGroup
from aiogram.fsm.context import FSMContext
import apps.database.requests as rq
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apps.database.requests import create_support_ticket, get_user_by_tg_id
from aiogram.filters import StateFilter



router = Router()
@router.message(CommandStart())
async def cmd_start(message: Message):
    await rq.set_user(message.from_user.id)
    await message.answer('–ü—Ä–∏–≤–µ—Ç', reply_markup=main_kb)
    await message.reply('–ö–∞–∫ –¥–µ–ª–∞')
@router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def catalog(message :Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞',reply_markup=await categories())
@router.callback_query(F.data.startswith('category_'))
async def category(callback: CallbackQuery):
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    category_id = callback.data.split('_')[1]
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=await items(category_id))
@router.callback_query(F.data.startswith('item_'))
async def show_item(callback: CallbackQuery):
    item_id = callback.data.split('_')[1]
    item_data = await rq.get_item(item_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardBuilder()
    keyboard.add(InlineKeyboardButton(
        text='–ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º', 
        callback_data=f'category_{item_data.category}'
    ))
    keyboard.add(InlineKeyboardButton(
        text='–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 
        callback_data='back_to_categories'
    ))
    keyboard.add(InlineKeyboardButton(
        text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 
        callback_data='to_main'
    ))
    
    await callback.message.answer(
        f'–ù–∞–∑–≤–∞–Ω–∏–µ: {item_data.name}\n'
        f'–ù–∞–≥—Ä–∞–¥–∞: {item_data.reward}\n'
        f'–û–ø–∏—Å–∞–Ω–∏–µ: {item_data.desc}',
        reply_markup=keyboard.adjust(2).as_markup()
    )
    await callback.answer()
@router.callback_query(F.data == 'to_main')
async def back_to_main(callback: CallbackQuery):
    await callback.message.delete()  
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞,–ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞ –ø–æ–º–æ—â—å—é.",
        reply_markup=main_kb
    )
    await callback.answer()

@router.callback_query(F.data == 'back_to_categories')
async def back_to_categories(callback: CallbackQuery):
    await callback.message.delete()  
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞",
        reply_markup=await categories()
    )
    await callback.answer()
class SupportState(StatesGroup):
    waiting_for_support_message = State()

@router.callback_query(F.data == 'TP_room')
async def TP_room(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )
    await state.set_state(SupportState.waiting_for_support_message)
    await callback.answer()
@router.message(Command("cancel"),~StateFilter(None))
async def cancel_support(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == SupportState.waiting_for_support_message:
        await state.clear()
        await message.answer(
            "‚ùå –†–µ–∂–∏–º —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=await categories()
        )
    else:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /cancel –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        await message.answer(
            "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=await categories()
        )

# –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã /cancel
@router.message(SupportState.waiting_for_support_message)
async def process_support_message(message: Message, state: FSMContext, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
    if message.text.startswith('/'):
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        
    SUPPORT_CHAT_ID = 7268834861  # –í–∞—à ID
    
    try:
        user = await get_user_by_tg_id(message.from_user.id)
        if not user:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        ticket = await create_support_ticket(user.id, message.text)
        
        if not ticket:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ.")
            await state.clear()
            return

        user_info = f"ID: {message.from_user.id}\n–ò–º—è: {message.from_user.full_name}"
        if message.from_user.username:
            user_info += f"\nUsername: @{message.from_user.username}"
        
        await bot.send_message(
            SUPPORT_CHAT_ID,
            f"üö® –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{ticket.id}\n\n"
            f"üë§ {user_info}\n"
            f"üïí {ticket.created_at}\n\n"
            f"üìÑ {message.text}"
        )
        
        await message.answer(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"
            f"–ù–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è: #{ticket.id}",
            reply_markup=await categories()
        )
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.",
            reply_markup=await categories()
        )
    
    finally:
        await state.clear()